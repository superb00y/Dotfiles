[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]

# [language-server.texlab.config.texlab.chktex]
# onOpenAndSave = true
# onEdit = true

# [language-server.texlab.config.texlab.forwardSearch]
# executable = "zathura"
# args = [ "%f" ]

# [language-server.texlab.config.texlab.build]
# # auxDirectory = "build"
# # logDirectory = "build"
# # pdfDirectory = "build"

# forwardSearchAfter = true
# onSave = true

# executable = "tectonic"
# args = [
#  "-X",
#  "compile",
#  "--synctex",
#  # "--keep-logs",
#  # "--keep-intermediates",
#  # "--outdir=build",
#  "%f",
#  ]

# executable = "pdflatex"
# args = [
#  "-interaction=nonstopmode",
#  "%f",
#  ]



[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.marklsp]
command = "vscode-markdown-language-server"
args = ["--stdio"]

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config.settings]
lineLength = 80
logLevel = "debug"

[language-server.ruff.config.settings.lint]
select = ["E4", "E7"]
preview = false

[language-server.ruff.config.settings.format]
preview = true

[language-server.biome]
command = "biome"
args = ["lsp-proxy"] 

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

[language-server.lua-language-server]
command = "lua-language-server"

[language-server.bash-language-server]
command = "bash-language-server"
args = ["start"]

[language-server.clangd]
command = "clangd"

[language-server.pyright]
command = "pyright"
args = ["--stdio"]

[language-server.pylsp]
command = "pylsp"

[language-server.pyright.config]
reportMissingTypeStubs = false

[language-server.emmet-ls]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.jdtls]
command = "jdtls"
args = [""]

[language-server.latexindent]
command = "latexindent"
args = [""]

# Language-specific settings
[[language]]
name = "typescript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = ["ts"]
shebangs = ["deno", "node"]
roots = ["deno.json", "package.json", "tsconfig.json"]
language-servers = [ "typescript-language-server", "eslint", "emmet-ls"]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "typescript"] }

[[language]]
name = "java"
scope = "source.java"
injection-regex = "java"
file-types = ["java", "jar"]
language-servers = [  "jdtls" ]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "google-java-format", args = ["-"] }

[[language]]
name = "go"
scope = "source.go"
injection-regex = "go"
file-types = ["go"]
roots = ["Gopkg.toml", "go.mod"]
auto-format = true
formatter = { command = "goimports" }
comment-token = "//"
language-servers = [ "gopls","golangci-lint" ]
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py"]
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", "requirements.txt"]
language-servers = [  "pylsp" ]
# formatter = { command = "bash", args = ["-c", "isort - | black -"] }
formatter = {command = "bash", args = ["-c", "isort --profile black - | black --quiet --line-length=88 -"]}
indent = { tab-width = 4, unit = "    " }
auto-format = true

[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(ba|z)?sh"
file-types = ["sh", "bash", "zsh"]
shebangs = ["sh", "bash", "zsh"]
roots = []
# comment-token = "#"
language-servers = [ "bash-language-server" ]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "shfmt", args = ["-i", "2", "-ci"] }

[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = ["js"]
shebangs = ["node"]
roots = ["package.json"]
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "biome"]
auto-format = true
formatter = { command = "biome", args = ["format", "--stdin-file-path", "a.js"] }

[[language]]
name = "jsx"
scope = "source.jsx"
injection-regex = "^(jsx|react)$"
file-types = ["jsx"]
roots = ["package.json"]
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "tailwindcss-ls" ]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "babel"] }

[[language]]
name = "tsx"
scope = "source.tsx"
injection-regex = "^(tsx|react)$"
file-types = ["tsx"]
roots = ["package.json"]
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "tailwindcss-ls" ]
auto-format = true
# formatter = { command = "prettier", args = ["--parser", "typescript"] }
formatter = { command = "biome", args = ["format", "--stdin-file-path", "a.ts"] }

[[language]]
name = "css"
scope = "source.css"
file-types = ["css"]
roots = ["package.json"]
language-servers = [ "tailwindcss-ls", "vscode-css-language-server" ]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "css"] }

[[language]]
name = "markdown"
scope = "source.md"
file-types = ["md"]
auto-format = true
language-servers = [ "marklsp" ]
formatter = { command = "prettier", args = ["--parser", "markdown"] }

[[language]]
name = "html"
scope = "text.html"
file-types = ["html"]
roots = ["package.json"]
language-servers = [ "emmet-ls", "vscode-html-language-server", "vscode-css-language-server", "tailwindcss-ls" ]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "html"] }

[[language]]
name = "json"
scope = "source.json"
file-types = ["json"]
roots = ["package.json"]
language-servers = [ "typescript-language-server", "vscode-json-language-server" ]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "json"] }

[[language]]
name = "lua"
injection-regex = "lua"
scope = "source.lua"
file-types = ["lua"]
shebangs = ["lua", "luajit"]
roots = [".luarc.json", ".luacheckrc", ".stylua.toml", "selene.toml", ".git"]
# comment-token = "--"
block-comment-tokens = { start = "--[[", end = "--]]" }
indent = { tab-width = 2, unit = "  " }
language-servers = [ "lua-language-server" ]
formatter = { command = "stylua", args=["-"] }
auto-format = true

[[language]]
name = "c"
scope = "source.c"
file-types = ["c", "h"]
roots = ["Makefile", "configure", "CMakeLists.txt"]
language-servers = [ "clangd" ]
auto-format = true
formatter = { command = "clang-format" }

[[language]]
name = "cpp"
scope = "source.cpp"
file-types = ["cpp", "hpp", "cc", "hh", "cxx", "hxx"]
roots = ["Makefile", "configure", "CMakeLists.txt"]
language-servers = [ "clangd" ]
auto-format = true
formatter = { command = "clang-format" }

[[language]]
name = "latex"
scope = "source.tex"
injection-regex = "tex"
file-types = ["tex"]
roots = []
# comment-token = "%"
language-servers = [ "texlab" ]
indent = { tab-width = 2, unit = "    " }
formatter = { command = "tex-fmt", args = ["-s", "-n", "-t", "4"] }
# formatter = { command = "latexindent", args = ["-s "] }
auto-format = true


[[language]]
name = "prolog"
scope = "source.prolog"
file-types = ["pl", "prolog"]
shebangs = ["swipl"]
comment-token = "%"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "swipl" ]

